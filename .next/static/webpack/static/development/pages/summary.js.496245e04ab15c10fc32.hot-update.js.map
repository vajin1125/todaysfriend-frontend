{"version":3,"file":"static/webpack/static\\development\\pages\\summary.js.496245e04ab15c10fc32.hot-update.js","sources":["webpack:///./pages/summary.js"],"sourcesContent":["import { Row, Col, Form, Icon, Input, Button, Select, DatePicker,InputNumber,TimePicker, Spin } from 'antd'\nimport Link from 'next/link'\nimport moment from 'moment'\nimport axios from 'axios'\nimport { base_url } from './components/base_url'\nimport Router from 'next/router'\nimport { Header } from './components/Header'\nimport { Footer } from './components/Footer'\nimport {booking_top_banner} from './components/images'\nimport { language_list } from './components/language_list'\nimport '../static/css/summary.css'\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nconst languageOption = language_list.map((language) => \n    <Option key={language.name.toString()} value={language.name}>{language.name}</Option>\n)\n\nfunction langChange(value) {\n    console.log(`selected ${value}`);\n}\n\nfunction inputNumberonChange(value) {\n    console.log('changed', value);\n}\n\nclass BookingSummaryForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tourdate: '',\n            starttime: '',\n            loading: false,\n            booking_tourname: '',\n            booking_tourdate: '',\n            booking_starttime: '',\n            booking_language: [],\n            booking_numberofpeople: '',\n            booking_bookername: '',\n            booking_email: '',\n            booking_price: ''\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            booking_tourname: sessionStorage.getItem('booking_tourname'),\n            booking_tourdate: sessionStorage.getItem('booking_tourdate'),\n            booking_starttime: sessionStorage.getItem('booking_tourstarttime'),\n            booking_language: sessionStorage.getItem('booking_language'),\n            booking_numberofpeople: sessionStorage.getItem('booking_numberofpeople'),\n            booking_bookername: sessionStorage.getItem('booking_bookername'),\n            booking_email: sessionStorage.getItem('booking_email'),\n            booking_price: sessionStorage.getItem('booking_price')\n        })\n    }\n\n    makeLanguageArray = () => {\n        let langarray = []\n        if (this.state.booking_language.length != 0) {\n            let lang = this.state.booking_language.split(',')\n            langarray = [...lang]\n        }\n        return langarray        \n    }\n\n    datepickeronChange = (date, dateString) => {\n        console.log(date, dateString);\n        this.setState({\n            tourdate: dateString,\n        })\n    }\n\n    timepickeronChange = (time, timeString) => {\n        console.log(time, timeString);\n        this.setState({\n            starttime: timeString,\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                const tourdate = this.state.tourdate\n                const starttime = this.state.starttime\n                console.log('Tour Date:', tourdate);\n                console.log('Start Time:', starttime);\n                \n                axios.post( base_url + '/api/booking_summary', {values, tourdate, starttime})\n                .then(function (response) {\n                    console.log('response:', response);\n                    if (response.data['type'] === 'success') {\n                        Router.push('/payment')\n                    } else {\n                        this.setState({\n                            loading: false\n                        })\n                        Modal.error({\n                            title: 'Your booking has been failed!',\n                            content: 'Please try again !',\n                        });\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error:', error);\n                });\n            }\n        });\n    }\n\n    render() {\n\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n              xs: { span: 24 },\n              sm: { span: 8 },\n            },\n            wrapperCol: {\n              xs: { span: 24 },\n              sm: { span: 16 },\n            },\n        };\n        return(\n            <div>\n                <Row>\n                    <Col span={24} style={{height:'20vw',position:'relative'}}>\n                        <img src={booking_top_banner} alt='booking_top_banner' style={{width:'100%',position:'absolute',left:0,bottom:0}}/>\n                    </Col>\n                </Row>\n                <h1 style={{textAlign:\"center\",marginTop:30}}>Booking Summary</h1>\n                <Row type=\"flex\">\n                    <Col span={12} style={{margin:\"0 auto\"}}>\n                        <p style={{textAlign:\"center\",fontWeight:600}}>\n                        Thank you for booking! A confirmation email has been sent to you email. Please check out the email. I hope you to have a good time with local friend!\n                        </p>\n                    </Col>\n                </Row>\n                <Form className=\"summary-form\" onSubmit={this.handleSubmit}>\n                    <div className=\"formBody\" style={{border:\"1px solid rgba(0, 0, 0, 0.2)\",borderRadius:10,padding:\"30px 20px\",width:500,margin:\"0 auto\"}}>\n                        <FormItem\n                            {...formItemLayout}\n                            label=\"Tour Name\"\n                        >\n                            {getFieldDecorator('tourname', {\n                                initialValue: this.state.booking_tourname,\n                                rules: [{\n                                    required: true, message: 'Please input tour name!'\n                                }]\n                            })(\n                                <Input size=\"large\" placeholder=\"Tour Name\"/>\n                            )}\n                        </FormItem>\n                        \n                        <FormItem\n                            {...formItemLayout}\n                            label=\"Date of Tour\"\n                        >\n                            {getFieldDecorator('tourdate', {\n                                initialValue: moment(this.state.booking_tourdate),\n                                rules: [{\n                                    required: true, message: 'Please input date of tour'\n                                }]\n                            })(\n                                <DatePicker size=\"large\" style={{width:\"100%\"}} onChange={this.datepickeronChange} placeholder=\"Date of tour\"/>\n                            )}\n                        </FormItem>\n\n                        <FormItem\n                            {...formItemLayout}\n                            label=\"Start time\"\n                        >\n                            {getFieldDecorator('starttime', {\n                                initialValue: this.state.booking_starttime,\n                                rules: [{\n                                    required: true, message: 'Please input start time for your tour!'\n                                }]\n                            })(\n                                // <TimePicker size=\"large\" style={{width:\"100%\"}} onChange={this.timepickeronChange} defaultOpenValue={moment('00:00:00', 'HH:mm:ss')} placeholder=\"Start time\"/>\n                                <Select \n                                    size=\"large\" \n                                    onChange={this.onChangeMeetingTime}\n                                >\n                                    <Option value=\"09:00\">09:00</Option>\n                                    <Option value=\"09:30\">09:30</Option>\n                                    <Option value=\"10:00\">10:00</Option>\n                                    <Option value=\"10:30\">10:30</Option>\n                                    <Option value=\"11:00\">11:00</Option>\n                                    <Option value=\"11:30\">11:30</Option>\n                                    <Option value=\"12:00\">12:00</Option>\n                                    <Option value=\"12:30\">12:30</Option>\n                                    <Option value=\"13:00\">13:00</Option>\n                                    <Option value=\"13:30\">13:30</Option>\n                                    <Option value=\"14:00\">14:00</Option>\n                                    <Option value=\"14:30\">14:30</Option>\n                                    <Option value=\"15:00\">15:00</Option>\n                                    <Option value=\"15:30\">15:30</Option>\n                                    <Option value=\"16:00\">16:00</Option>\n                                    <Option value=\"16:30\">16:30</Option>\n                                    <Option value=\"17:00\">17:00</Option>\n                                    <Option value=\"18:30\">18:30</Option>\n                                    <Option value=\"19:00\">19:00</Option>\n                                    <Option value=\"19:30\">19:30</Option>\n                                    <Option value=\"20:00\">20:00</Option>\n                                </Select>\n                            )}\n                        </FormItem>\n\n                        <FormItem\n                            {...formItemLayout}\n                            label=\"Language\"\n                        >\n                            {getFieldDecorator('language', {\n                                initialValue: this.makeLanguageArray(),\n                                rules: [{\n                                    required: true, message: 'Please input your language!'\n                                }]\n                            })(\n                                <Select size=\"large\" mode=\"multiple\" onChange={langChange} placeholder=\"Select your languages\">\n                                    {languageOption}\n                                </Select>\n                            )}\n                        </FormItem>\n\n                        <FormItem\n                            {...formItemLayout}\n                            label=\"\n                                Number of friend\n                            \"\n                        >\n                            {getFieldDecorator('numberOfPeople', {\n                                initialValue: this.state.booking_numberofpeople,\n                                rules: [{\n                                    required: true, message:'Please input number of people!'\n                                }]\n                            })(\n                                <InputNumber size=\"large\" style={{width:\"100%\"}} min={1} max={100000} onChange={inputNumberonChange} placeholder=\"Number of people (total)\"/>\n                            )}\n                        </FormItem>\n                        \n                        <FormItem\n                            {...formItemLayout}\n                            label=\"Name\"\n                        >\n                            {getFieldDecorator('bookername', {\n                                initialValue: this.state.booking_bookername,\n                                rules: [{\n                                    required: true, message: 'Please input booker name!'\n                                }]\n                            })(\n                                <Input size=\"large\" placeholder=\"Booker Name\"/>\n                            )}\n                        </FormItem>\n\n                        <FormItem\n                            {...formItemLayout}\n                            label=\"Email\"\n                        >\n                            {getFieldDecorator('email', {\n                                initialValue: this.state.booking_email,\n                                rules: [{\n                                    required: true, message: 'Please input your email!'\n                                }, {\n                                    type: 'email', message: 'This input is not valid!'\n                                }]\n                            })(\n                                <Input size=\"large\" placeholder=\"Email\"/>\n                            )}\n                        </FormItem>\n\n                        <FormItem\n                            {...formItemLayout}\n                            label=\"Price\"\n                        >\n                            {getFieldDecorator('price', {\n                                initialValue: this.state.booking_price,\n                                rules: [{\n                                    required: true, message: 'Please input price!'\n                                }]\n                            })(\n                                <Input size=\"large\" placeholder=\"Price\" />\n                            )}\n                        </FormItem>\n                    </div>\n                    <Row type=\"flex\" justify=\"center\" style={{marginTop:30}}>\n                        <Col span={4}>\n                            <Spin spinning={this.state.loading} size=\"large\">\n                            <Button size=\"large\" htmlType=\"submit\" type=\"primary\" block>Confirm</Button>\n                            </Spin>\n                        </Col>\n                    </Row>\n                </Form>\n            </div>\n        )\n    }\n}\nconst WrappedBookingSummaryForm = Form.create()(BookingSummaryForm);\n\nexport default class extends React.Component {\n    render(){\n        return(\n            <div>\n                <Header selected=\"summary\" />                \n                <WrappedBookingSummaryForm/>\n                <Footer selected=\"summary\" />\n            </div>\n        )\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AA7BA;AA+BA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAtCA;AAwCA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA7CA;AA+CA;AACA;AAAA;AACA;AADA;AAGA;AACA;AApDA;AAsDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAFA;AAeA;AACA;;;AAqEA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AALA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AADA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AADA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AADA;AAFA;AAOA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AADA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AADA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AADA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AADA;AAGA;AAAA;AADA;AAJA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AADA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA9QA;AACA;AA+QA;AACA;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AATA;AACA;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}